Plan: User inputs a game and program outputs 3 similar games to recommend.

Similarity criteria:
    1. Genre (RPG, FPS, etc.) -> limit of 3
    2. Subject (Fantasy, war, etc.) - user-defined tags
    3. Popularity
    4. Rating

Steps:
    1. Scrape game data from steam
        - Clean data
        - Generate a dict of characteristics for each game
        - Push to Excel
    2. Similarity algorithm -> Cosine Similarity
        - Calculate similarity score between every two games
        - Push to Excel
    3. Search algorithm
        - Given user input game, use similarity score to find 3 closest games
        - If game doesn't exist, return "None" for all 3 games
    4. Visualization for demo
        - TBD (Neo4J)

Discretization:
    - PosPercent
        0%-20% - 1
        21%-40% - 2
        41%-60% - 3
        61%-80% - 4
        81%-100% - 5

    - TotalReviews
        - Sort to get 1-5 score for popularity 
        Top 100% - 1
        Top 80% - 2
        Top 60% - 3
        Top 40% - 4
        Top 20% - 5

Resources:
    - scrape_steam.py (data scraping)
        - https://andrew-muller.medium.com/scraping-steam-user-reviews-9a43f9e38c92 
    - preprocess.py and recommend.py (cosine similarity and recommendation process)
        - https://www.datacamp.com/community/tutorials/recommender-systems-python
        - https://medium.com/web-mining-is688-spring-2021/netflix-movies-and-tv-shows-recommender-using-cosine-similarity-e053ee42a85b
        - https://towardsdatascience.com/using-cosine-similarity-to-build-a-movie-recommendation-system-ae7f20842599
    - recommend.py (user input module)
        - https://datatofish.com/entry-box-tkinter/